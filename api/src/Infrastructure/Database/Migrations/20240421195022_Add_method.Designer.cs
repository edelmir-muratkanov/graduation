// <auto-generated />
using System;
using Api.Infrastructure.Database;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationWriteDbContext))]
    [Migration("20240421195022_Add_method")]
    partial class Add_method
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.Methods.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("CollectorTypes")
                        .IsRequired()
                        .HasColumnType("smallint[]")
                        .HasColumnName("collector_types");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_methods");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_methods_name");

                    b.ToTable("methods", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Methods.MethodParameter", b =>
                {
                    b.Property<Guid>("MethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("method_id");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_id");

                    b.HasKey("MethodId", "PropertyId")
                        .HasName("pk_method_parameters");

                    b.HasIndex("PropertyId")
                        .HasDatabaseName("ix_method_parameters_property_id");

                    b.HasIndex("MethodId", "PropertyId")
                        .IsUnique()
                        .HasDatabaseName("ix_method_parameters_method_id_property_id");

                    b.ToTable("method_parameters", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Properties.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_properties");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_properties_name");

                    b.ToTable("properties", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Methods.MethodParameter", b =>
                {
                    b.HasOne("Api.Domain.Methods.Method", null)
                        .WithMany("Parameters")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_method_parameters_methods_method_id");

                    b.HasOne("Api.Domain.Properties.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_method_parameters_properties_property_id");

                    b.OwnsOne("Api.Domain.Methods.ParameterValueGroup", "FirstParameters", b1 =>
                        {
                            b1.Property<Guid>("MethodParameterMethodId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MethodParameterPropertyId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Avg")
                                .HasColumnType("double precision");

                            b1.Property<double>("Max")
                                .HasColumnType("double precision");

                            b1.Property<double>("Min")
                                .HasColumnType("double precision");

                            b1.HasKey("MethodParameterMethodId", "MethodParameterPropertyId")
                                .HasName("pk_method_parameters");

                            b1.ToTable("method_parameters");

                            b1.ToJson("first_parameters");

                            b1.WithOwner()
                                .HasForeignKey("MethodParameterMethodId", "MethodParameterPropertyId")
                                .HasConstraintName("fk_method_parameters_method_parameters_method_parameter_method_id");
                        });

                    b.OwnsOne("Api.Domain.Methods.ParameterValueGroup", "SecondParameters", b1 =>
                        {
                            b1.Property<Guid>("MethodParameterMethodId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MethodParameterPropertyId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Avg")
                                .HasColumnType("double precision");

                            b1.Property<double>("Max")
                                .HasColumnType("double precision");

                            b1.Property<double>("Min")
                                .HasColumnType("double precision");

                            b1.HasKey("MethodParameterMethodId", "MethodParameterPropertyId");

                            b1.ToTable("method_parameters");

                            b1.ToJson("second_parameters");

                            b1.WithOwner()
                                .HasForeignKey("MethodParameterMethodId", "MethodParameterPropertyId")
                                .HasConstraintName("fk_method_parameters_method_parameters_method_id_property_id");
                        });

                    b.Navigation("FirstParameters");

                    b.Navigation("SecondParameters");
                });

            modelBuilder.Entity("Api.Domain.Methods.Method", b =>
                {
                    b.Navigation("Parameters");
                });
#pragma warning restore 612, 618
        }
    }
}
