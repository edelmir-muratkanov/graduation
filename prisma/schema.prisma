// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  User
  Admin
}

enum CollectorType {
  Terrigen
  Carbonate
}

enum ProjectType {
  Ground
  Shelf
}

model Users {
  id               String          @id @default(cuid())
  email            String          @unique
  passwordHash     String
  refreshTokenHash String?
  role             Role            @default(User)
  projects         ProjectsUsers[]

  @@map("users")
}

model Properties {
  id       String               @id @default(cuid())
  name     String               @unique
  methods  MethodsProperties[]
  projects ProjectsProperties[]

  @@map("properties")
}

model MethodsProperties {
  method     Methods    @relation(fields: [methodId], references: [id])
  methodId   String
  property   Properties @relation(fields: [propertyId], references: [id])
  propertyId String

  parameters Json

  @@id([methodId, propertyId])
  @@map("methods_properties")
}

model Methods {
  id             String              @id @default(cuid())
  name           String              @unique
  collectorTypes CollectorType[]     @default([])
  parameters     MethodsProperties[]
  projects       ProjectsMethods[]

  @@map("methods")
}

model Projects {
  id            String               @id @default(cuid())
  name          String
  country       String
  operator      String
  type          ProjectType
  collectorType CollectorType?
  parameters    ProjectsProperties[]
  methods       ProjectsMethods[]
  users         ProjectsUsers[]

  @@map("projects")
}

model ProjectsProperties {
  project   Projects @relation(fields: [projectId], references: [id])
  projectId String

  property   Properties @relation(fields: [propertyId], references: [id])
  propertyId String

  value Float

  @@id([projectId, propertyId])
  @@index([propertyId, projectId])
  @@map("projects_properties")
}

model ProjectsMethods {
  project   Projects @relation(fields: [projectId], references: [id])
  projectId String

  method   Methods @relation(fields: [methodId], references: [id])
  methodId String

  @@id([methodId, projectId])
  @@map("projects_methods")
}

model ProjectsUsers {
  project   Projects @relation(fields: [projectId], references: [id])
  projectId String
  user      Users    @relation(fields: [userId], references: [id])
  userId    String

  @@id([userId, projectId])
  @@map("projects_users")
}
