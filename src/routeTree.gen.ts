/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserImport } from './routes/_user'
import { Route as AdminImport } from './routes/_admin'
import { Route as ProjectsIndexImport } from './routes/projects/index'
import { Route as MethodsIndexImport } from './routes/methods/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as ProjectsProjectIdIndexImport } from './routes/projects/$projectId/index'
import { Route as UserProjectsNewIndexImport } from './routes/_user/projects/new/index'
import { Route as AdminMethodsNewIndexImport } from './routes/_admin/methods/new/index'

// Create Virtual Routes

const homeIndexLazyImport = createFileRoute('/(home)/')()

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/_user',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const homeIndexLazyRoute = homeIndexLazyImport
  .update({
    path: '/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(home)/index.lazy').then((d) => d.Route))

const ProjectsIndexRoute = ProjectsIndexImport.update({
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/projects/index.lazy').then((d) => d.Route),
)

const MethodsIndexRoute = MethodsIndexImport.update({
  path: '/methods/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/methods/index.lazy').then((d) => d.Route))

const AuthIndexRoute = AuthIndexImport.update({
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/index.lazy').then((d) => d.Route))

const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexImport.update({
  path: '/projects/$projectId/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/projects/$projectId/index.lazy').then((d) => d.Route),
)

const UserProjectsNewIndexRoute = UserProjectsNewIndexImport.update({
  path: '/projects/new/',
  getParentRoute: () => UserRoute,
} as any).lazy(() =>
  import('./routes/_user/projects/new/index.lazy').then((d) => d.Route),
)

const AdminMethodsNewIndexRoute = AdminMethodsNewIndexImport.update({
  path: '/methods/new/',
  getParentRoute: () => AdminRoute,
} as any).lazy(() =>
  import('./routes/_admin/methods/new/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_admin': {
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_user': {
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/methods/': {
      preLoaderRoute: typeof MethodsIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/(home)/': {
      preLoaderRoute: typeof homeIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId/': {
      preLoaderRoute: typeof ProjectsProjectIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/_admin/methods/new/': {
      preLoaderRoute: typeof AdminMethodsNewIndexImport
      parentRoute: typeof AdminImport
    }
    '/_user/projects/new/': {
      preLoaderRoute: typeof UserProjectsNewIndexImport
      parentRoute: typeof UserImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AdminRoute.addChildren([AdminMethodsNewIndexRoute]),
  UserRoute.addChildren([UserProjectsNewIndexRoute]),
  AuthIndexRoute,
  MethodsIndexRoute,
  ProjectsIndexRoute,
  homeIndexLazyRoute,
  ProjectsProjectIdIndexRoute,
])

/* prettier-ignore-end */
